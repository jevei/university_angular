{"ast":null,"code":"import { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductApiRequestService {\n  get products() {\n    return this._products;\n  }\n  constructor(http) {\n    this.http = http;\n    //private productsUrl = 'http://localhost:8080/api/products';\n    this.productsUrl = 'https://pacific-mesa-08775.herokuapp.com/api/products';\n    this._products = [];\n  }\n  handleError(_operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  listProducts() {\n    return this.http.get(this.productsUrl).pipe(map(response => {\n      console.log('Products list : ', response);\n      this._products = response;\n      return true;\n    }), catchError(this.handleError('getProducts', [])));\n  }\n  showProduct(id) {\n    return this.http.get(this.productsUrl + '/' + id).pipe(map(response => {\n      if (response.product_id == id) {\n        return response;\n      }\n      return false;\n    }), catchError(error => {\n      console.log('Error', error);\n      return of(null);\n    }));\n  }\n  deleteProduct(product) {\n    return this.http.delete(this.productsUrl + '/' + product.product_id).pipe(map(response => {\n      console.log(response);\n      if (response == null) {\n        return true;\n      }\n      return false;\n    }), catchError(error => {\n      console.log('Error', error);\n      return of(null);\n    }));\n  }\n  updateProduct(productId, product) {\n    return this.http.put(this.productsUrl + '/' + productId, product).pipe(map(response => {\n      if (response != null) {\n        console.log(response);\n        return true;\n      } else {\n        console.log(response);\n        return false;\n      }\n    }), catchError(error => {\n      console.log('Error', error);\n      return of(null);\n    }));\n  }\n  addProduct(newProduct) {\n    return this.http.post(this.productsUrl, newProduct).pipe(map(response => {\n      console.log('Product added : ', response);\n      if (response) {\n        return true;\n      } else {\n        return false;\n      }\n    }), catchError(this.handleError('addProduct')));\n  }\n}\nProductApiRequestService.ɵfac = function ProductApiRequestService_Factory(t) {\n  return new (t || ProductApiRequestService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductApiRequestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductApiRequestService,\n  factory: ProductApiRequestService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","of","ProductApiRequestService","products","_products","constructor","http","handleError","_operation","result","error","console","listProducts","get","productsUrl","pipe","response","log","showProduct","id","product_id","deleteProduct","product","delete","updateProduct","productId","put","addProduct","newProduct","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Predator\\Desktop\\université\\session4\\INF1013\\jxr\\src\\app\\services\\product-api-request.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map, Observable, of } from 'rxjs';\r\nimport { Product } from '../models/product.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductApiRequestService {\r\n  //private productsUrl = 'http://localhost:8080/api/products';\r\n  private productsUrl = 'https://pacific-mesa-08775.herokuapp.com/api/products';\r\n  private _products: Product[] = [];\r\n\r\n  get products(): Product[] {\r\n    return this._products;\r\n  }\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private handleError<T>(_operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  listProducts(): Observable<any> {\r\n    return this.http.get<Product[]>(this.productsUrl).pipe(\r\n      map((response) => {\r\n        console.log('Products list : ', response);\r\n        this._products = response;\r\n        return true;\r\n      }),\r\n      catchError(this.handleError<Product[]>('getProducts', []))\r\n    );\r\n  }\r\n\r\n  showProduct(id: number): Observable<any> {\r\n    return this.http.get<any>(this.productsUrl + '/' + id).pipe(\r\n      map((response) => {\r\n        if (response.product_id == id) {\r\n          return response;\r\n        }\r\n        return false;\r\n      }),\r\n      catchError((error) => {\r\n        console.log('Error', error);\r\n\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteProduct(product: Product): Observable<any> {\r\n    return this.http\r\n      .delete<any>(this.productsUrl + '/' + product.product_id)\r\n      .pipe(\r\n        map((response) => {\r\n          console.log(response);\r\n          if (response == null) {\r\n            return true;\r\n          }\r\n          return false;\r\n        }),\r\n        catchError((error) => {\r\n          console.log('Error', error);\r\n\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n\r\n  updateProduct(productId: string, product: Product): Observable<any> {\r\n    return this.http.put(this.productsUrl + '/' + productId, product).pipe(\r\n      map((response) => {\r\n        if (response != null) {\r\n          console.log(response);\r\n          return true;\r\n        } else {\r\n          console.log(response);\r\n          return false;\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        console.log('Error', error);\r\n\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  addProduct(newProduct: Product): Observable<any> {\r\n    return this.http.post(this.productsUrl, newProduct).pipe(\r\n      map((response) => {\r\n        console.log('Product added : ', response);\r\n        if (response) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }),\r\n      catchError(this.handleError<any>('addProduct'))\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}