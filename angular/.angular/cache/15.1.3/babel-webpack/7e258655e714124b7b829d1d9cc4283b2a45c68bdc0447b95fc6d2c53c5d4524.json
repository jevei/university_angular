{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginAccessGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(_route, _state) {\n    console.log('guard product', this.authService.isLoggedIn);\n    if (this.authService.isLoggedIn) {\n      return true;\n    } else {\n      // sinon, on peut fournir un URLTree pour rediriger l'utilisateur\n      return this.router.parseUrl('/products');\n    }\n  }\n}\nLoginAccessGuard.ɵfac = function LoginAccessGuard_Factory(t) {\n  return new (t || LoginAccessGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nLoginAccessGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginAccessGuard,\n  factory: LoginAccessGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAcA,OAAM,MAAOA,gBAAgB;EAC3BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EACvEC,WAAW,CACTC,MAA8B,EAC9BC,MAA2B;IAM3BC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACN,WAAW,CAACO,UAAU,CAAC;IACzD,IAAI,IAAI,CAACP,WAAW,CAACO,UAAU,EAAE;MAC/B,OAAO,IAAI;KACZ,MAAM;MACL;MACA,OAAO,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,WAAW,CAAC;;EAE5C;;AAjBWV,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAW,SAAhBX,gBAAgB;EAAAY,YAFf;AAAM","names":["LoginAccessGuard","constructor","authService","router","canActivate","_route","_state","console","log","isLoggedIn","parseUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Predator\\Desktop\\université\\session4\\INF1013\\jxr\\src\\app\\guards\\login-access.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoginAccessGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n  canActivate(\r\n    _route: ActivatedRouteSnapshot,\r\n    _state: RouterStateSnapshot\r\n  ):\r\n    | Observable<boolean | UrlTree>\r\n    | Promise<boolean | UrlTree>\r\n    | boolean\r\n    | UrlTree {\r\n    console.log('guard product', this.authService.isLoggedIn);\r\n    if (this.authService.isLoggedIn) {\r\n      return true;\r\n    } else {\r\n      // sinon, on peut fournir un URLTree pour rediriger l'utilisateur\r\n      return this.router.parseUrl('/products');\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}