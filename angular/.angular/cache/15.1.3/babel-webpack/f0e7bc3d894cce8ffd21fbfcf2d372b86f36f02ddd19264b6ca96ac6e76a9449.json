{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AdminAccessGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(_route, _state) {\n    if (this.authService.isAdmin) {\n      return true;\n    } else {\n      // sinon, on peut fournir un URLTree pour rediriger l'utilisateur\n      return this.router.parseUrl('/');\n    }\n  }\n}\nAdminAccessGuard.ɵfac = function AdminAccessGuard_Factory(t) {\n  return new (t || AdminAccessGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAdminAccessGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminAccessGuard,\n  factory: AdminAccessGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAcA,OAAM,MAAOA,gBAAgB;EAC3BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EACvEC,WAAW,CACTC,MAA8B,EAC9BC,MAA2B;IAM3B,IAAI,IAAI,CAACJ,WAAW,CAACK,OAAO,EAAE;MAC5B,OAAO,IAAI;KACZ,MAAM;MACL;MACA,OAAO,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,GAAG,CAAC;;EAEpC;;AAhBWR,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAS,SAAhBT,gBAAgB;EAAAU,YAFf;AAAM","names":["AdminAccessGuard","constructor","authService","router","canActivate","_route","_state","isAdmin","parseUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Predator\\Desktop\\université\\session4\\INF1013\\jxr\\src\\app\\guards\\admin-access.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminAccessGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n  canActivate(\r\n    _route: ActivatedRouteSnapshot,\r\n    _state: RouterStateSnapshot\r\n  ):\r\n    | Observable<boolean | UrlTree>\r\n    | Promise<boolean | UrlTree>\r\n    | boolean\r\n    | UrlTree {\r\n    if (this.authService.isAdmin) {\r\n      return true;\r\n    } else {\r\n      // sinon, on peut fournir un URLTree pour rediriger l'utilisateur\r\n      return this.router.parseUrl('/');\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}