{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'content-Type': 'application/json'\n  })\n};\nexport class AuthService {\n  get currentUser() {\n    return this._currentUser;\n  }\n  get isLoggedIn() {\n    return !!this._currentUser;\n  }\n  get isAdmin() {\n    return !!this._currentUser?.is_admin;\n  }\n  constructor(http) {\n    this.http = http;\n    this._currentUser = null;\n    //private usersUrl = 'http://localhost:8080/api/users';\n    this.usersUrl = 'https://pacific-mesa-08775.herokuapp.com/api/users';\n    this.CURRENT_USER_KEY = 'jxr.users.currentUser';\n    const storedCurrentUser = JSON.parse(sessionStorage.getItem(this.CURRENT_USER_KEY) ?? 'null');\n    if (storedCurrentUser) {\n      // this._currentUser = new User(storedCurrentUser);\n      this._currentUser = storedCurrentUser;\n      console.log(this.currentUser);\n    }\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  setCurrentUser(user) {\n    this._currentUser = user;\n    sessionStorage.setItem(this.CURRENT_USER_KEY, JSON.stringify(user));\n    console.log(this._currentUser);\n  }\n  userRegistration(newUser) {\n    newUser.is_admin = false;\n    return this.http.post(this.usersUrl, newUser).pipe(map(response => {\n      console.log('New User service : ', response);\n      if (response) {\n        console.log('succès:', response);\n        this.setCurrentUser(newUser);\n        return true;\n      } else {\n        return false;\n      }\n    }), catchError(this.handleError('adduser')));\n  }\n  userLogin(email, password) {\n    return this.http.get(this.usersUrl).pipe(map(response => {\n      console.log(response);\n      var retour = false;\n      response.forEach(_user => {\n        if (_user.email == email && _user.encrypted_password == password) {\n          this.setCurrentUser(_user);\n          retour = true;\n        }\n      });\n      return retour;\n    }), catchError(this.handleError('getUsers', [])));\n  }\n  userSignout() {\n    return this.http.get(this.usersUrl).pipe(map(response => {\n      console.log('New User signout service : ', response);\n      if (response) {\n        this.setCurrentUser(null);\n        return true;\n      } else {\n        return false;\n      }\n    }), catchError(error => {\n      console.log('Error', error);\n      return of(null);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","httpOptions","headers","AuthService","currentUser","_currentUser","isLoggedIn","isAdmin","is_admin","constructor","http","storedCurrentUser","JSON","parse","sessionStorage","getItem","CURRENT_USER_KEY","console","log","handleError","operation","result","error","setCurrentUser","user","setItem","stringify","userRegistration","newUser","post","usersUrl","pipe","response","userLogin","email","password","get","retour","forEach","_user","encrypted_password","userSignout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Predator\\Desktop\\université\\session4\\INF1013\\jxr\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { User } from '../models/user.model';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'content-Type': 'application/json' }),\r\n};\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private _currentUser: User | null = null;\r\n  //private usersUrl = 'http://localhost:8080/api/users';\r\n  private usersUrl = 'https://pacific-mesa-08775.herokuapp.com/api/users';\r\n  private readonly CURRENT_USER_KEY = 'jxr.users.currentUser';\r\n\r\n  get currentUser(): User | null {\r\n    return this._currentUser;\r\n  }\r\n\r\n  get isLoggedIn(): boolean {\r\n    return !!this._currentUser;\r\n  }\r\n\r\n  get isAdmin(): boolean {\r\n    return !!this._currentUser?.is_admin;\r\n  }\r\n\r\n  constructor(private http: HttpClient) {\r\n    const storedCurrentUser = JSON.parse(\r\n      sessionStorage.getItem(this.CURRENT_USER_KEY) ?? 'null'\r\n    );\r\n\r\n    if (storedCurrentUser) {\r\n      // this._currentUser = new User(storedCurrentUser);\r\n      this._currentUser = storedCurrentUser;\r\n      console.log(this.currentUser);\r\n    }\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  private setCurrentUser(user: User | null) {\r\n    this._currentUser = user;\r\n    sessionStorage.setItem(this.CURRENT_USER_KEY, JSON.stringify(user));\r\n    console.log(this._currentUser);\r\n  }\r\n\r\n  userRegistration(newUser: User): Observable<any> {\r\n    newUser.is_admin = false;\r\n    return this.http.post<User>(this.usersUrl, newUser).pipe(\r\n      map((response) => {\r\n        console.log('New User service : ', response);\r\n        if (response) {\r\n          console.log('succès:', response);\r\n          this.setCurrentUser(newUser);\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }),\r\n      catchError(this.handleError<User>('adduser'))\r\n    );\r\n  }\r\n\r\n  userLogin(email: string, password: string): Observable<any> {\r\n    return this.http.get<User[]>(this.usersUrl).pipe(\r\n      map((response) => {\r\n        console.log(response);\r\n        var retour: boolean = false;\r\n        response.forEach((_user) => {\r\n          if (_user.email == email && _user.encrypted_password == password) {\r\n            this.setCurrentUser(_user);\r\n            retour = true;\r\n          }\r\n        });\r\n        return retour;\r\n      }),\r\n      catchError(this.handleError<User[]>('getUsers', []))\r\n    );\r\n  }\r\n\r\n  userSignout(): Observable<any> {\r\n    return this.http.get<any>(this.usersUrl).pipe(\r\n      map((response) => {\r\n        console.log('New User signout service : ', response);\r\n        if (response) {\r\n          this.setCurrentUser(null);\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        console.log('Error', error);\r\n\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}